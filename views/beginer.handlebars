<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <title>Zulu Zest</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
  <form action="/beginer" method="get">
  <h1>ZuluZest</h1>
  <h2 style="text-align: center;">Beginer Level</h2>

    <div class="" id="livesDisplay"></div>
   {{#each getBegginnerLevel}}
  <div class="stage" id="stage{{this.id}}">
    <h6>{{this.words}} means {{this.translation}}</h6>
    <audio fa fa-volume-high onplay="myFunction()">
      <source src="/public/20231206_211606.mp3" type="audio/mp3">
      <source src="audio.ogg" type="audio/ogg">
    </audio>
    <button id="volumeButton"><i class="fa fa-volume-high"></i></button>
  </div>
  {{/each}}

  <div class="testClass">
    <button type="button" id="startButton">Start</button>
    <div id="label-container"></div>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/speech-commands@0.4.0/dist/speech-commands.min.js"></script>
    <script type="text/javascript">
        const URL = "https://teachablemachine.withgoogle.com/models/_FX9GI_pq/";
        async function createModel() {
            const checkpointURL = URL + "model.json";
            const metadataURL = URL + "metadata.json";
            const recognizer = speechCommands.create(
                "BROWSER_FFT",
                undefined,
                checkpointURL,
                metadataURL);
            await recognizer.ensureModelLoaded();
            return recognizer;
        }
        let isRecordingAllowed = false;
        let currentStage = 0;
        var stages = document.querySelectorAll('.stage');
        var stageData = {{getBegginnerLevelJson}};
        
    document.getElementById("startButton").addEventListener("click", startStages);

    async function startStages() {
    isRecordingAllowed = true;
    const recognizer = await createModel();
    const classLabels = recognizer.wordLabels();
    const labelContainer = document.getElementById("label-container");
    for (let i = 0; i < classLabels.length; i++) {
        labelContainer.appendChild(document.createElement("div"));
    }

    showStage(classLabels, recognizer, labelContainer, stageData[currentStage].words);
}

        async function showStage(classLabels, recognizer, labelContainer) {
            const stageElement = stages[currentStage];
            stageElement.style.display = 'block';

            const currentStageData = stageData[currentStage];
            const expectedWord = currentStageData.words;

            const result = await listenToRecognizer(recognizer);
            const scores = result.scores;

            showScores(classLabels, scores, stageElement, labelContainer, expectedWord);
        }

        async function listenToRecognizer(recognizer) {
            return new Promise(resolve => {
                recognizer.listen(result => {
                    if (!isRecordingAllowed) {
                        return;
                    }
                    resolve(result);
                }, {
                    includeSpectrogram: true,
                    probabilityThreshold: 0.75,
                    invokeCallbackOnNoiseAndUnknown: true,
                    overlapFactor: 0.50
                });
            });
        }

        function showScores(classLabels, scores, stageElement, labelContainer, expectedWord) {
            let index = 0;

            const intervalId = setInterval(() => {
                const classPrediction = classLabels[index] + ": " + scores[index].toFixed(2);

                if (classPrediction.includes(expectedWord) && scores[index] > 0.95) {
                    // Move to the next stage
                    stageElement.style.display = 'none';
                    currentStage++;
                    if (currentStage < stages.length) {
                        showStage(classLabels, recognizer, labelContainer);
                    } else {
                        // All stages completed
                        document.getElementById('livesDisplay').innerText = 'All stages completed';
                    }
                    clearInterval(intervalId);
                } else {
                    // Try again
                    stageElement.innerHTML = "Oh Oh, Let's try again";
                    stageElement.innerHTML += "<button id='tryAgainButton'>Try Again</button>";
                    document.querySelector('#tryAgainButton').addEventListener('click', () => {
                        showStage(classLabels, recognizer, labelContainer);
                    });
                    clearInterval(intervalId);
                }

                labelContainer.childNodes[0].innerHTML = classPrediction;
                console.log(classPrediction);

                index++;

                if (index === classLabels.length) {
                    clearInterval(intervalId);
                }
            }, 5000); // Delay for 5 seconds before processing the next score
        }

        function myFunction() {
          document.getElementById("stg1").innerHTML = "Sawubona = Hello";
        }

        var volumeButton = document.getElementById("volumeButton");
        volumeButton.addEventListener("click", () => console.log("Button clicked!"));
    </script>
  </div>
  </form>
</body>
</html>
