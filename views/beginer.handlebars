  <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <title>Zulu Zest</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
  <form action="/beginer" method="get">
  <h1>ZuluZest</h1>

    <div class="" id="livesDisplay"></div>
   <div class="stage" id="stage1">
    <h6>SA-WU-BO-NA means HELLO</h6>
<audio fa fa-volume-high onplay="myFunction()">
  <source src="/public/20231206_211606.mp3" type="audio/mp3">
  <source src="audio.ogg" type="audio/ogg">
</audio>
  <button id="volumeButton"><i class="fa fa-volume-high"></i></button>
  {{!-- <button id="nextButton">Next</button>
  <button id="tryAgainButton">Try Again</button> --}}
  </div>
 {{!-- <div class="stage" id="stage2">
    <h6>U-NJA-NI means HOW ARE YOU?</h6>
<audio fa fa-volume-high onplay="">
  <source src="/public/20231206_211606.mp3" type="audio/mp3">
  <source src="audio.ogg" type="audio/ogg">
</audio>
  <button id="volumeButton"><i class="fa fa-volume-high"></i></button>
  <button id="nextButton">Next</button>
    <button id="tryAgainButton">Try Again</button>

  </div> --}}

  <div class="testClass">
<button type="button" onclick="init()">Start</button>
<div id="label-container"></div>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/speech-commands@0.4.0/dist/speech-commands.min.js"></script>
<script type="text/javascript">
    // more documentation available at
    // https://github.com/tensorflow/tfjs-models/tree/master/speech-commands
    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/_FX9GI_pq/";
    async function createModel() {
        const checkpointURL = URL + "model.json"; // model topology
        const metadataURL = URL + "metadata.json"; // model metadata
        const recognizer = speechCommands.create(
            "BROWSER_FFT", // fourier transform type, not useful to change
            undefined, // speech commands vocabulary feature, not useful for your models
            checkpointURL,
            metadataURL);
        // check that model and metadata are loaded via HTTPS requests.
        await recognizer.ensureModelLoaded();
        return recognizer;
    }
    let isRecordingAllowed = false;
        let currentStage = 0;
        var stages = document.querySelectorAll('.stage');

        function showNextStage() {
          // Hide other stages
          stages.forEach((stage, index) => {
            if (index !== currentStage) {
              stage.style.display = 'none';
            }
          });

          // Display message and buttons for the current stage
          let stageElement = stages[currentStage];
          stageElement.innerHTML = "You're On A Roll!!";
          stageElement.innerHTML += "<button id='nextButton'>Next</button>";
          stageElement.innerHTML += "<button id='tryAgainButton'>Try Again</button>";

          // Attach event listeners
          document.querySelector('#nextButton').addEventListener('click', showNextStage);
          document.querySelector('#tryAgainButton').addEventListener('click', tryAgain);
        }

        function tryAgain() {
          document.getElementById('livesDisplay').innerText = 'Please come back after your lives refill';
        }

        async function init() {
          isRecordingAllowed = true;
          const recognizer = await createModel();
          const classLabels = recognizer.wordLabels();
          const labelContainer = document.getElementById("label-container");
          for (let i = 0; i < classLabels.length; i++) {
            labelContainer.appendChild(document.createElement("div"));
          }

          recognizer.listen(result => {
            if (!isRecordingAllowed) {
              return;
            }

            const scores = result.scores;
            let stageElement = stages[currentStage];

            for (let i = 0; i < classLabels.length; i++) {
              const classPrediction = classLabels[i] + ": " + result.scores[i].toFixed(2);

              if (classPrediction.includes('Sawubona') && result.scores[i] > 0.95) {
                // Trigger next stage
                showNextStage();
              } else  {
                // Show 'Try Again' button if the prediction is incorrect
                stageElement.innerHTML = "Oh Oh, Let's try again";
                stageElement.innerHTML += "<button id='tryAgainButton'>Try Again</button>";
              }

              labelContainer.childNodes[i].innerHTML = classPrediction;
              console.log(classPrediction);
            }
          }, {
            includeSpectrogram: true,
            probabilityThreshold: 0.75,
            invokeCallbackOnNoiseAndUnknown: true,
            overlapFactor: 0.50
          });
        }

        function myFunction() {
          document.getElementById("stg1").innerHTML = "Sawubona = Hello";
        }

        var volumeButton = document.getElementById("volumeButton");

        volumeButton.addEventListener("click", function () {
          console.log("Button clicked!");
        });
    
</script>

</div>
</form>
</body>
</html>